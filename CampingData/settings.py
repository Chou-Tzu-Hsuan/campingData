"""
Django settings for homework1 project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import dj_database_url
from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv() # 讀取 .env（本地用，Render 上沒用）

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-!+&$l&yrg)aeki!5k!yms9zbvd!7$6&o!st-fzonl7!z2u*l^%'   #original setting(1/3)
SECRET_KEY = os.environ.get("SECRET_KEY")   #render setting

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True  #original setting(2/3)
DEBUG = os.environ.get("DEBUG","False").lower() == "true"   #render setting

# ALLOWED_HOSTS = ['*']  #original setting(3/3)
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS","*").split(" ")  #render setting

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'sslserver',
    'cloudinary',   #cloudinary setting
    'cloudinary_storage',  #cloudinary setting
]


LOGIN_REDIRECT_URL = '/user/'       # 使用者登入成功後導向會員中心
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/userlogin/'


MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',  #whitenoise
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CampingData.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myapp.context_processors.cart_item_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'CampingData.wsgi.application'

#發送email的設定
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587  # 或 465 (如果使用 SSL)
EMAIL_USE_TLS = True # 或 EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
AUTH_USER_MODEL = 'myapp.User'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.getenv('DB_NAME'),
#         'USER': os.getenv('DB_USER'),
#         'PASSWORD': os.getenv('DB_PASSWORD'),
#         'HOST': os.getenv('DB_HOST'),
#         'PORT': os.getenv('DB_PORT'),
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#             'charset': 'utf8mb4',
#         }
#     }
# }
# -------------------------------------------------------------
# #資料庫轉為postgresql,僅適合本地測試或 demo
# DATABASES = {
#     "default": dj_database_url.parse(
#         "postgresql://campingdata_render_user:nA1kyLdHmR9REQmQNa4n6uItBTWc3YBP@dpg-d1oj06idbo4c73b4l8u0-a.oregon-postgres.render.com/campingdata_render"
#     )
# }
# -------------------------------------------------------------

# Database 設定：自動防範 bytes 問題
raw_db_url = os.environ.get("DATABASE_URL", None)

if isinstance(raw_db_url, bytes):
    raw_db_url = raw_db_url.decode("utf-8")

if not raw_db_url:
    raise Exception("❌ DATABASE_URL is not set! Please set it in your environment variables.")


DATABASES = {
    "default": dj_database_url.parse(raw_db_url)
}

#沒有出現bytes 問題可以用下方的方式
# DATABASES = {
#     'default': dj_database_url.parse(os.environ.get("DATABASE_URL"))
# }

#---------產品圖片指定路徑---------
# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'
#---------產品圖片指定路徑-使用cloudinary media暫時取消--------


#---------cloudinary setting---------
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUD_NAME'),
    'API_KEY': os.getenv('API_KEY'),
    'API_SECRET': os.getenv('API_SECRET'),
}  

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
#---------cloudinary setting---------

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hant'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 本機
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# #....render使用STATIC_ROOT....
STATIC_ROOT = BASE_DIR / 'staticfiles' 

# whitenoise........
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#測試用參數(金流)
ECPAY_MERCHANT_ID = os.getenv('ECPAY_MERCHANT_ID')
ECPAY_HASH_KEY = os.getenv('ECPAY_HASH_KEY')
ECPAY_HASH_IV = os.getenv('ECPAY_HASH_IV')
ECPAY_RETURN_URL = os.getenv('ECPAY_RETURN_URL')
SITE_URL = os.getenv('SITE_URL')

import cloudinary

cloudinary.config(
  cloud_name= os.getenv('CLOUD_NAME'),
  api_key= os.getenv('API_KEY'),
  api_secret= os.getenv('API_SECRET'),
)
